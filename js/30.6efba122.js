(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{382:function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return g});var r=t(7),a=t.n(r),s=t(8),l=t.n(s),c=t(9),i=t.n(c),o=t(27),p=t.n(o),u=t(10),h=t.n(u),d=t(48),m=t.n(d),g=function(n){function e(){var n,r;a()(this,e);for(var s=arguments.length,c=new Array(s),o=0;o<s;o++)c[o]=arguments[o];return r=l()(this,(n=i()(e)).call.apply(n,[this].concat(c))),m()(p()(r),"document",function(){return{document:t(651),className:"progress-page"}}),r}return h()(e,n),e}(t(610).a)},610:function(n,e,t){"use strict";t.d(e,"a",function(){return N});var r=t(7),a=t.n(r),s=t(11),l=t.n(s),c=t(8),i=t.n(c),o=t(9),p=t.n(o),u=t(10),h=t.n(u),d=t(0),m=t.n(d),g=t(613),v=t.n(g),w=t(614),f=t.n(w),N=(t(615),t(611),function(n){function e(){return a()(this,e),i()(this,p()(e).apply(this,arguments))}return h()(e,n),l()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){var r=new v.a.Renderer;r.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'.concat(n,"</thead><tbody>").concat(e,"</tbody></table></div>")},r.code=function(n,e){var t=!(!e||!f.a.getLanguage(e))?f.a.highlight(e,n).value:n;return'<pre><code class="hljs '.concat(e,'">').concat(t,"</code></pre>")};var a=v()(e,{renderer:r});return m.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:a}})}return m.a.createElement("span",null)}}]),e}(d.Component))},611:function(n,e,t){},651:function(n,e){n.exports="# 进度条 Progress\n\n\n\n## 基本用法\n```jsx\nimport { Progress, Cell, Select, Stepper } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percent: 10,\n      theme: 'primary',\n      shape: 'round',\n      weight: 'normal'\n    };\n  }\n\n  render() {\n    const { percent, theme, shape, weight } = this.state;\n\n    return (\n      <div>\n        <div className=\"progress\">\n          <Progress\n            percent={percent}\n            theme={theme}\n            shape={shape}\n            weight={weight}\n          >\n            {percent}%\n          </Progress>\n        </div>\n        <div className=\"progress\">\n          <Progress\n            type=\"circle\"\n            percent={percent}\n            theme={theme}\n            shape={shape}\n            weight={weight}\n          >\n            <div className=\"progress-content\">\n              <span className=\"progress-text\">{percent}</span>\n              <span className=\"progress-percent\">%</span>\n            </div>\n          </Progress>\n        </div>\n        <div className=\"progress\">\n          <Progress\n            type=\"semi-circle\"\n            percent={percent}\n            theme={theme}\n            shape={shape}\n            weight={weight}\n          >\n            <div className=\"progress-content\">\n              <span className=\"progress-text\">{percent}</span>\n              <span className=\"progress-percent\">%</span>\n            </div>\n          </Progress>\n        </div>\n\n        <Cell title=\"进度\">\n          <Stepper\n            step={10}\n            min={0}\n            max={100}\n            value={percent}\n            onChange={(value) => {\n              if (Number.isNaN(Number(value))) return;\n              this.setState({\n                percent: value,\n              });\n            }}\n          />\n        </Cell>\n\n        <Cell hasArrow title=\"主题\">\n          <Select\n            value={theme}\n            dataSource={[\n              { value: 'primary', label: 'primary' },\n              { value: 'success', label: 'success' },\n              { value: 'warning', label: 'warning' },\n              { value: 'danger', label: 'danger' },\n            ]}\n            onOk={(selected) => {\n              this.setState({\n                theme: selected[0].value,\n              });\n            }}\n          />\n        </Cell>\n\n        <Cell hasArrow title=\"线条形状\">\n          <Select\n            value={shape}\n            dataSource={[\n              { value: 'round', label: 'round' },\n              { value: 'rect', label: 'rect' },\n            ]}\n            onOk={(selected) => {\n              this.setState({\n                shape: selected[0].value,\n              });\n            }}\n          />\n        </Cell>\n\n        <Cell hasArrow title=\"线条粗细\">\n          <Select\n            value={weight}\n            dataSource={[\n              { value: 'normal', label: 'normal' },\n              { value: 'thin', label: 'thin' },\n            ]}\n            onOk={(selected) => {\n              this.setState({\n                weight: selected[0].value,\n              });\n            }}\n          />\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| theme | string | 'primary' | 主题，可选值 `default`, `primary`, `success`, `warning`, `danger` |\n| percent | number | 0 | 进度百分比（范围：0～100） |\n| type | string | 'line' | 类型，可选值 `line`, `circle`, `semi-circle` |\n| shape | string | 'round' | 线条形状，可选值 `round`, `rect` |\n| weight | string | 'normal' | 线条粗细，可选值 `normal`, `thin` |\n"}}]);