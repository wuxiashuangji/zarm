(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{391:function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return h});var o=t(7),a=t.n(o),r=t(8),i=t.n(r),s=t(9),c=t.n(s),l=t(27),u=t.n(l),d=t(10),m=t.n(d),p=t(48),v=t.n(p),h=function(n){function e(){var n,o;a()(this,e);for(var r=arguments.length,s=new Array(r),l=0;l<r;l++)s[l]=arguments[l];return o=i()(this,(n=c()(e)).call.apply(n,[this].concat(s))),v()(u()(o),"document",function(){return{document:t(660),className:"toast-page"}}),o}return m()(e,n),e}(t(610).a)},610:function(n,e,t){"use strict";t.d(e,"a",function(){return b});var o=t(7),a=t.n(o),r=t(11),i=t.n(r),s=t(8),c=t.n(s),l=t(9),u=t.n(l),d=t(10),m=t.n(d),p=t(0),v=t.n(p),h=t(613),f=t.n(h),C=t(614),g=t.n(C),b=(t(615),t(611),function(n){function e(){return a()(this,e),c()(this,u()(e).apply(this,arguments))}return m()(e,n),i()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){var o=new f.a.Renderer;o.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'.concat(n,"</thead><tbody>").concat(e,"</tbody></table></div>")},o.code=function(n,e){var t=!(!e||!g.a.getLanguage(e))?g.a.highlight(e,n).value:n;return'<pre><code class="hljs '.concat(e,'">').concat(t,"</code></pre>")};var a=f()(e,{renderer:o});return v.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:a}})}return v.a.createElement("span",null)}}]),e}(p.Component))},611:function(n,e,t){},660:function(n,e){n.exports='# 轻提示 Toast\n\n\n\n## 基本用法\n```jsx\nimport { Toast, Cell, Button, Icon } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Toast.show(\'默认3秒自动关闭\');\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          普通\n        </Cell>\n\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Toast.show(\'指定10秒后自动关闭\', 10000);\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          指定停留时间\n        </Cell>\n\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Toast.show(\n                  <div className="box">\n                    <Icon className="box-icon" type="right-round-fill" />\n                    <div className="box-text">\n                      预约成功\n                    </div>\n                  </div>\n                );\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          自定义内容\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 加载中\n```jsx\nimport { Loading, Cell, Button } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Loading.show();\n                setTimeout(()=>{\n                  Loading.hide();\n                }, 1100);\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          Loading\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| visible | boolean | false | 是否显示 |\n| stayTime | number | 3000 | 自动关闭前停留的时间（单位：毫秒） |\n| onClose | () => void | - | 关闭时触发的回调函数 |\n| onMaskClick | () => void | - | 点击遮罩层时触发的回调函数 |\n'}}]);