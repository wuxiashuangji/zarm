{"version":3,"sources":["webpack:///./examples/components/ScrollToTop.jsx","webpack:///./examples/components/Header.jsx","webpack:///./examples/pages/PullPage.jsx"],"names":["ScrollToTop","window","scrollTo","Component","Header","title","this","props","className","REFRESH_STATE","LOAD_STATE","Page","key","setState","setTimeout","mounted","dataSource","length","i","push","customLoading","randomNum","min","max","Range","Rand","Math","random","round","getRandomNum","state","console","log","startIndex","customRefreshing","fetchData","itemsRender","Body","refreshing","loading","onRefresh","onLoad","loadData"],"mappings":"0NAaeA,E,oJARXC,OAAOC,SAAS,EAAG,K,+BAInB,OAAO,S,GAPeC,aCEpBC,G,gJAEK,IACCC,EAAUC,KAAKC,MAAfF,MAER,OACE,4BAAQG,UAAU,UAChB,kBAAC,EAAD,MACCH,O,GARYF,cAcNC,O,8OCXTK,G,OACI,GADJA,EAIK,EAJLA,EAKK,EAILC,EACI,EADJA,EAGK,EAHLA,EAIK,EAJLA,EAKK,EALLA,EAMM,E,IASNC,E,YAEJ,WAAYJ,GAAO,yBACjB,4BAAMA,IADW,uBAmBP,SAACK,GACX,EAAKC,SAAL,iBAAoBD,GAAQH,IAC5BK,WAAW,WACT,GAAK,EAAKC,QAAV,CAKA,IAHA,IAAMC,EAAa,GACbC,EAASD,EAAWC,OAEjBC,EAAID,EAAQC,EAAID,EAAS,GAAIC,IACpCF,EAAWG,KAAK,kBAAC,IAAD,CAAMP,KAAMM,GAAZ,KAAkBA,EAAI,EAAtB,OAGlB,EAAKL,SAAL,KACEG,cADF,UAEMJ,GAAQH,MAEb,OAnCc,sBAuCR,WACT,EAAKI,SAAS,CAAEO,cAAeV,IAC/BI,WAAW,WACT,GAAK,EAAKC,QAAV,CAEA,IAAMM,EApDZ,SAAsBC,EAAKC,GACzB,IAAMC,EAAQD,EAAMD,EACdG,EAAOC,KAAKC,SAClB,OAAQL,EAAMI,KAAKE,MAAMH,EAAOD,GAiDVK,CAAa,EAAG,GAC1Bb,EAAe,EAAKc,MAApBd,WACJI,EAAgBV,EAKpB,GAFAqB,QAAQC,IAAR,cAAiC,IAAdX,EAAkB,KAAsB,IAAdA,EAAkB,KAAO,OAEpD,IAAdA,EACFD,EAAgBV,OACX,GAAkB,IAAdW,EACTD,EAAgBV,OAIhB,IAFA,IACMuB,EAAajB,EAAWC,OACrBC,EAAIe,EAAYf,EAAIe,EAFX,EAEmCf,IACnDF,EAAWG,KAAK,kBAAC,IAAD,CAAMP,KAAMM,GAAZ,KAAkBA,EAAI,EAAtB,OAIpB,EAAKL,SAAS,CACZG,aACAI,oBAED,OAjEH,EAAKL,SAAU,EACf,EAAKe,MAAQ,CACXI,iBAAkBzB,EAClBW,cAAeV,EACfM,WAAY,IANG,E,iEAWjBV,KAAK6B,UAAU,sB,6CAIf7B,KAAKS,SAAU,I,+BA2Df,IAJO,aACiDT,KAAKwB,MAArDI,EADD,EACCA,iBAAkBd,EADnB,EACmBA,cAAeJ,EADlC,EACkCA,WAEnCoB,EAAc,GACXlB,EAAI,EAAGA,EAAI,EAAGA,IACrBkB,EAAYjB,KAAK,kBAAC,IAAD,CAAMP,KAAMM,GAAZ,KAAkBA,EAAI,EAAtB,OAGnB,OACE,kBAAC,IAAD,CAAWV,UAAU,aACnB,kBAAC,IAAD,CAAQH,MAAM,kBACd,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAMD,OAAP,CAAcC,MAAM,OACpB,kBAAC,IAAMgC,KAAP,KACE,kBAAC,IAAD,CAmCEC,WAAYJ,EACZK,QAASnB,EACToB,UAAW,WACT,EAAKL,UAAU,qBAEjBM,OAAQnC,KAAKoC,UACZ1B,MAKT,kBAAC,IAAD,W,GArIWb,aA2IJQ","file":"js/17.369ce57e.js","sourcesContent":["import { Component } from 'react';\n\nclass ScrollToTop extends Component {\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default ScrollToTop;\n","import React, { Component } from 'react';\nimport ScrollToTop from './ScrollToTop';\nimport '../styles/components/Header.scss';\n\nclass Header extends Component {\n\n  render() {\n    const { title } = this.props;\n\n    return (\n      <header className=\"Header\">\n        <ScrollToTop />\n        {title}\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Container from '../components/Container';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport { Panel, Cell, Pull } from '../../components';\nimport '../styles/pages/PullPage';\n\nconst REFRESH_STATE = {\n  normal: 0,  // 普通\n  pull: 1,    // 下拉刷新（未满足刷新条件）\n  drop: 2,    // 释放立即刷新（满足刷新条件）\n  loading: 3, // 加载中\n  success: 4, // 加载成功\n  failure: 5, // 加载失败\n};\n\nconst LOAD_STATE = {\n  normal: 0,  // 普通\n  abort: 1, // 中止\n  loading: 2, // 加载中\n  success: 3, // 加载成功\n  failure: 4, // 加载失败\n  complete: 5, // 加载完成（无新数据）\n};\n\nfunction getRandomNum(min, max) {\n  const Range = max - min;\n  const Rand = Math.random();\n  return (min + Math.round(Rand * Range));\n}\n\nclass Page extends Component {\n\n  constructor(props) {\n    super(props);\n    this.mounted = true;\n    this.state = {\n      customRefreshing: REFRESH_STATE.normal,\n      customLoading: LOAD_STATE.normal,\n      dataSource: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData('customRefreshing');\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  // 模拟请求数据\n  fetchData = (key) => {\n    this.setState({ [`${key}`]: REFRESH_STATE.loading });\n    setTimeout(() => {\n      if (!this.mounted) return;\n\n      const dataSource = [];\n      const length = dataSource.length;\n\n      for (let i = length; i < length + 20; i++) {\n        dataSource.push(<Cell key={+i}>第 {i + 1} 行</Cell>);\n      }\n\n      this.setState({\n        dataSource,\n        [`${key}`]: REFRESH_STATE.success,\n      });\n    }, 2000);\n  }\n\n  // 模拟加载更多数据\n  loadData = () => {\n    this.setState({ customLoading: LOAD_STATE.loading });\n    setTimeout(() => {\n      if (!this.mounted) return;\n\n      const randomNum = getRandomNum(0, 5);\n      const { dataSource } = this.state;\n      let customLoading = LOAD_STATE.success;\n\n      // eslint-disable-next-line\n      console.log(`状态: ${randomNum === 0 ? '失败' : (randomNum === 1 ? '完成' : '成功')}`);\n\n      if (randomNum === 0) {\n        customLoading = LOAD_STATE.failure;\n      } else if (randomNum === 1) {\n        customLoading = LOAD_STATE.complete;\n      } else {\n        const newLength = 5;\n        const startIndex = dataSource.length;\n        for (let i = startIndex; i < startIndex + newLength; i++) {\n          dataSource.push(<Cell key={+i}>第 {i + 1} 行</Cell>);\n        }\n      }\n\n      this.setState({\n        dataSource,\n        customLoading,\n      });\n    }, 2000);\n  }\n\n  render() {\n    const { customRefreshing, customLoading, dataSource } = this.state;\n\n    const itemsRender = [];\n    for (let i = 0; i < 3; i++) {\n      itemsRender.push(<Cell key={+i}>第 {i + 1} 行</Cell>);\n    }\n\n    return (\n      <Container className=\"pull-page\">\n        <Header title=\"上拉加载下拉刷新 Pull\" />\n        <main>\n          <Panel>\n            <Panel.Header title=\"基本\" />\n            <Panel.Body>\n              <Pull\n                // initialDistance={0}\n                // refreshDistance={80}\n                // refreshRender={(refreshState, percent) => {\n                //   const cls = 'custom-control';\n                //   switch (refreshState) {\n                //     case REFRESH_STATE.pull:\n                //       return <div className={cls} style={{ transform: `scale(${percent / 100})` }}><img src={logo} alt=\"\" /></div>;\n\n                //     case REFRESH_STATE.drop:\n                //       return <div className={`${cls} rotate360`}><img src={logo} alt=\"\" /></div>;\n\n                //     case REFRESH_STATE.loading:\n                //       return <div className={cls}><Spinner className=\"rotate360\" /></div>;\n\n                //     case REFRESH_STATE.success:\n                //       return <div className={cls}>加载成功</div>;\n\n                //     case REFRESH_STATE.failure:\n                //       return <div className={cls}>加载失败</div>;\n                //   }\n                // }}\n                // loadRender={(loadState) => {\n                //   const cls = 'custom-control';\n                //   switch (loadState) {\n                //     case LOAD_STATE.loading:\n                //       return <div className={cls}><Spinner className=\"rotate360\" /></div>;\n\n                //     case LOAD_STATE.failure:\n                //       return <div className={cls}>加载失败</div>;\n\n                //     case LOAD_STATE.complete:\n                //       return <div className={cls}>我是有底线的</div>;\n                //   }\n                // }}\n                refreshing={customRefreshing}\n                loading={customLoading}\n                onRefresh={() => {\n                  this.fetchData('customRefreshing');\n                }}\n                onLoad={this.loadData}>\n                {dataSource}\n              </Pull>\n            </Panel.Body>\n          </Panel>\n        </main>\n        <Footer />\n      </Container>\n    );\n  }\n}\n\nexport default Page;\n"],"sourceRoot":""}