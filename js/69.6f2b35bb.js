(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{587:function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return h});var l=t(7),o=t.n(l),r=t(8),a=t.n(r),u=t(9),s=t.n(u),p=t(27),i=t.n(p),d=t(10),c=t.n(d),m=t(48),C=t.n(m),h=function(n){function e(){var n,l;o()(this,e);for(var r=arguments.length,u=new Array(r),p=0;p<r;p++)u[p]=arguments[p];return l=a()(this,(n=s()(e)).call.apply(n,[this].concat(u))),C()(i()(l),"document",function(){return{document:t(639),className:"input-page"}}),l}return c()(e,n),e}(t(616).a)},639:function(n,e){n.exports='# 文本框 Input\n\n\n\n## 基本用法\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      inputValue: \'\',\n    }\n  }\n\n  handleInputChange(value) {\n    this.setState({\n      inputValue: value,\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell title="单行文本">\n          <Input\n            clearable\n            type="text"\n            placeholder="请输入"\n            value={this.state.inputValue}\n            onChange={this.handleInputChange.bind(this)}\n          />\n        </Cell>\n        <Cell title="多行文本"><Input type="text" rows={3} placeholder="请输入" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 输入类型\n\n```jsx\nimport { Input, Cell, Button } from \'zarm\';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      focused: false,\n      number: \'\',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell title="数字">\n          <Input\n            ref={(ref) => { this.manualFocus = ref; }}\n            type="number"\n            placeholder="type is number"\n            value={this.state.number}\n            focused={this.state.focused}\n            onFocus={value => console.log(`onFocus: ${value}`)}\n            onBlur={value => console.log(`onBlur: ${value}`)}\n            onChange={value => console.log(`onChange: ${value}`)}\n          />\n        </Cell>\n\n        <Cell title="金额">\n          <Input type="price" placeholder="type is price" />\n        </Cell>\n\n        <Cell title="身份证">\n          <Input type="idcard" placeholder="type is idcard" />\n        </Cell>\n\n        <Cell>\n          <Button size="xs" theme="primary" onClick={() => this.manualFocus.focus()}>click to focus the first input</Button>\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 只读 / 禁用状态\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell title="单行文本">\n          <Input readOnly type="text" defaultValue="我是只读状态" />\n        </Cell>\n        <Cell title="单行文本">\n          <Input disabled type="text" value="我是禁用状态" />\n        </Cell>\n        <Cell title="多行文本">\n          <Input readOnly type="text" rows={3} value="我是只读状态，我是只读状态，我是只读状态，我是只读状态。" />\n        </Cell>\n        <Cell title="多行文本">\n          <Input disabled type="text" rows={3} value="我是禁用状态，我是禁用状态，我是禁用状态，我是禁用状态。" />\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 高度自适应\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell title="多行文本"><Input autoHeight type="text" rows={3} placeholder="写点啥..." /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 无标签栏\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell><Input type="text" placeholder="标题" /></Cell>\n        <Cell><Input autoHeight type="text" rows={4} maxLength={200} placeholder="摘要" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 显示输入字数\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell><Input autoHeight showLength type="text" rows={4} maxLength={200} placeholder="摘要" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| type | string | \'text\' | 类型，可选值 `text`、`number`、`idcard`、`price`、`password`、`search` |\n| value | number | string | - | 值 |\n| defaultValue | number | string | - | 初始值 |\n| disabled | boolean | false | 是否禁用 |\n| readOnly | boolean | false | 是否只读 |\n| rows | number | 2 | 多行文本时的显示行数。type为text类型时有效。 |\n| autoHeight | boolean | false | 是否高度自适应 |\n| maxLength | number | - | 输入字数上限 |\n| showLength | boolean | false | 是否显示输入字数。多行文本（type="text"且包含rows属性）时有效。 |\n| clearable | boolean | true | 是否显示清除按钮。多行文本（type="text"且包含rows属性）时无效。必须为受控组件（属性包含value、onChange）时方可生效。 |\n| onChange | (value?: number \\| string) => void | - | 值变化时触发的回调函数 |\n\n'}}]);